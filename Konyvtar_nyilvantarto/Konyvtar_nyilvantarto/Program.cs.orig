using Konyvtar_nyilvantarto.Contexts;
<<<<<<< HEAD
using Microsoft.EntityFrameworkCore;
using Konyvtar_nyilvantarto.Extensions;
=======
using Konyvtar_nyilvantarto.Contracts.LibraryMember;
using Konyvtar_nyilvantarto.Services.LibraryMembers.Repository;
using Konyvtar_nyilvantarto.Services.LibraryMembers.Service;
using Konyvtar_nyilvantarto.Contracts.BorrowingData;
using Konyvtar_nyilvantarto.Services.BorrowingData.Repository;
using Konyvtar_nyilvantarto.Services.BorrowingData.Service;
using Konyvtar_nyilvantarto.Validators;
using Microsoft.EntityFrameworkCore;
using Konyvtar_nyilvantarto.Validators.LibraryMemberValidators;
using Konyvtar_nyilvantarto.Validators.LibraryMemberValidators.Models;
using Konyvtar_nyilvantarto.Validators.Common;
using System;
using LibaryRegister.Contracts.LibraryMember;
using LibaryRegister.Contracts.Book;
>>>>>>> master

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddDbContext<LibraryContext>(options =>
{
    options.UseSqlServer(builder.Configuration.GetConnectionString("LocalDb"));
    options.UseLazyLoadingProxies();
});

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Services.RegisterRepositories();
builder.Services.RegisterServices();

builder.Services.RegisterCommonValidators();
builder.Services.RegisterBookValidators();
builder.Services.RegisterLibraryMemberValidators();
builder.Services.RegisterBorrowingValidators();

builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

var app = builder.Build();
app.UseCors(o => o.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader()); 

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}
using (var scope = app.Services.CreateScope())
{
    var dbContext = scope.ServiceProvider.GetRequiredService<LibraryContext>();

    dbContext.Database.Migrate();
}
app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();
